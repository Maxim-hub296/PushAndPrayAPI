from rest_framework.response import Response
from rest_framework.views import APIView
import subprocess
import git


# Create your views here.
class AboutApiView(APIView):
    def get(self, request):
        data = {
            "title": "О сайте Push & Pray",
            "intro": "Добро пожаловать в Push & Pray — единственный сервис, который поможет избежать беды!",
            "beliefs": [
                '"Работает на моей машине" — это официальная форма QA-тестирования.',
                "Если баг невозможно воспроизвести, значит его не существует.",
                "Срочный фикс в пятницу вечером — это традиция, а не ошибка."
            ],
            "disclaimer": [
                "Мы не знаем, как это делать правильно.",
                "Нам и так есть, чем заняться (например, чинить баги).",
                "Лучшая защита данных — это их полное отсутствие."
            ]
        }

        return Response(data)


class ExcuseApiView(APIView):
    def post(self, request):
        excuses_dict = {
            "external_delay": [
                "На моём компьютере всё работало, проблема где-то ещё.",
                "Внезапно пришлось заниматься приоритетной задачей.",
                "Интернет пропадал, не мог загрузить зависимости.",
                "Пошёл за кофе, не вернулся вовремя.",
            ],
            "third_party_bug": [
                "Проблема в библиотеке, которая обновилась вчера.",
                "API изменился без уведомления, сломался интеграционный код.",
                "Ошибки в legacy-коде мешают тестированию моего функционала.",
                "Кто-то поменял конфиг, теперь всё падает.",
            ],
            "needs_more_testing": [
                "Пока не уверен, что все edge-case’ы покрыты.",
                "Хочу удостовериться, что баги не повторятся на проде.",
                "Тесты упали, нужно разобраться.",
                "Сложный кейс требует больше времени.",
            ],
            "requirements_changed": [
                "Только вчера получил обновлённые ТЗ.",
                "Функционал переделали в последний момент.",
                "Заказчик внёс правки, теперь нужно переписать часть.",
                "Приоритеты резко поменялись.",
            ],
            "hardware_network": [
                "Мой компьютер завис и пришлось перезагружать.",
                "Сервер разработки упал, не смог загрузить код.",
                "VPN не работал, не смог подключиться к репозиторию.",
                "Интернет-соединение было очень нестабильным.",
            ],
            "dependencies": [
                "Жду, пока коллега закончит свою часть.",
                "Сторонний сервис упал, интеграция недоступна.",
                "Не могу протестировать, пока не обновят API.",
                "Зависимость сломалась после последнего деплоя.",
            ],
            "did_not_understand": [
                "Документация не помогла, нужна консультация.",
                "Не понял, как должно работать на самом деле.",
                "Требуется больше времени на разбор задачи.",
                "Нужно было уточнить требования, чтобы не ошибиться.",
            ],
            "other": [
                "Код работает на моей машине, но не у всех — загадка.",
                "Нейросеть сама решила, что сегодня выходной.",
                "Случайно зашел на Stack Overflow и потерял весь день в копи-пасте.",
                "Сайт слишком безопасный — не смог ничего сохранить.",
                "Просто хотел добавить немного хаоса в проект."
            ],
            "error": [
                "Неприведенная ошибка(пасхалка)"
            ]
        }
        reason = request.data.get('reason', 'error')
        return Response({'excuse': excuses_dict[reason]})


class CommitMessageApiView(APIView):
    def post(self, request):
        commit_messages_dict = {
            "feature_added": [
                "Добавлен новый функционал: реализован пользовательский профиль.",
                "Внедрен модуль оплаты с поддержкой нескольких способов.",
                "Добавлена интеграция с внешним API для обновления данных."
            ],
            "bug_fixed": [
                "Исправлена ошибка с зависанием приложения при загрузке.",
                "Починен баг с некорректным отображением на мобильных устройствах.",
                "Устранена проблема с неправильным подсчетом итогов."
            ],
            "docs_updated": [
                "Обновлена документация по установке и настройке.",
                "Добавлены инструкции по использованию новых функций.",
                "Исправлены опечатки и ошибки в README."
            ],
            "code_refactored": [
                "Рефакторинг модуля авторизации для улучшения читаемости.",
                "Оптимизирован код обработки данных без изменения функционала.",
                "Удалены неиспользуемые переменные и упрощены функции."
            ],
            "performance_optimized": [
                "Оптимизированы запросы к базе данных для ускорения загрузки.",
                "Сокращено время отклика сервера на 20%.",
                "Использован кэш для уменьшения нагрузки на API."
            ],
            "dependencies_updated": [
                "Обновлены версии библиотек для устранения уязвимостей.",
                "Обновлены зависимости проекта до последних стабильных версий.",
                "Обновлен webpack и babel для поддержки новых фич."
            ],
            "other": [
                "Внесены мелкие правки и улучшения.",
                "Обновлен конфигурационный файл без изменения кода.",
                "Внесены косметические изменения в UI."
            ],
            "error": [
                "Неприведенная ошибка(пасхалка)"
            ]
        }
        commit_type = request.data.get('commit_type', 'error')
        return Response({'messages': commit_messages_dict[commit_type]})


class ErrorMessageApiView(APIView):
    def post(self, request):
        error_jokes_dict = {
            "syntax_error": [
                "Синтаксическая ошибка: кто-то забыл точку с запятой. Наверное, это я.",
                "Похоже, код думает, что это поэзия — слишком много запятых.",
                "Синтаксис сломался, как и мои планы на сегодня."
            ],
            "logic_error": [
                "Логическая ошибка: программа решила жить своей жизнью.",
                "Если код работает неправильно — это просто новая функция.",
                "Когда логика уходит в отпуск, появляются баги."
            ],
            "network_issue": [
                "Сеть отказывается работать — наверное, сервер пошел пить кофе.",
                "Ошибка сети: возможно, кабель укусила кошка.",
                "Пинг до сервера равен бесконечности, как мое терпение."
            ],
            "database_error": [
                "База данных в отпуске, попробуйте позже.",
                "Ошибка базы: кто-то удалил все записи и убежал.",
                "SQL-запрос упал в обморок от перегрузки."
            ],
            "build_deploy_error": [
                "Сборка провалена: кто-то забыл запушить изменения.",
                "Ошибка деплоя: сервер устал и решил отдохнуть.",
                "Когда билд падает — начинается настоящая магия."
            ],
            "other": [
                "Что-то пошло не так, но никто не знает что именно.",
                "Ошибка неизвестного происхождения — идеальный баг.",
                "Компьютер решил сыграть в прятки с ошибками."
            ],
            'error': [
                "Неприведенная ошибка(пасхалка)"
            ]
        }

        error_type = request.data.get('error_type', 'error')
        return Response({'messages': error_jokes_dict[error_type]})
